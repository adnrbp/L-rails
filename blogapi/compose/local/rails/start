#!/bin/sh

set -x

# Only check network
# while !</dev/tcp/postgres/5432; do sleep 1; done;

# Required: postgres-client
# until psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
#   echo "Waiting for postgres server, $((RETRIES-=1)) remaining attempts..."
#   sleep 1
# done

# until psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -c "select 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do 
# 	echo "Waiting for postgres server to start, $((RETRIES)) remaining attempts..." 
# 	RETRIES=$((RETRIES-=1)) 
# 	sleep 1 
# done



# # Required: Netcat
# # wait for postgresql
# until nc -vz $POSTGRES_HOST 5432; do
#   echo "Postgresql is not ready, sleeping..."
#   sleep 1
# done
# echo "Postgresql is ready, starting Rails."



postgres_ready() {
ruby << END

require 'pg'
begin
	conn = PG::Connection.open(:host => ENV["POSTGRES_HOST"],
								:dbname => ENV["POSTGRES_DB"],
								:user => ENV["POSTGRES_USER"])
rescue PG::Error => e
	exit 1
ensure
	conn.close if conn
end
exit 0

END
}

until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'





#RAILS_ENV=development bundle exec rake db:create
RAILS_ENV=development bundle exec rake db:migrate
#RAILS_ENV=development bundle exec rake db:seed
RAILS_ENV=development bundle exec rails s -p 8002 -b '0.0.0.0'
